sliding_data <- map2_dfr(
groups,
seq_along(groups),
~sliding_window_group(.x, .y, length(groups), window_size = 3)
)
sliding_data
groups[[1]]
sliding_window_group <- function(df, group_id, total_groups, window_size = 3) {
message(sprintf("Processing group %d of %d...", group_id, total_groups))
df <- arrange(df, times)
n <- nrow(df)
if (n <= window_size) return(NULL)
map_dfr((window_size):(n - 1), function(i) {
# inputs: rows (i - window_size + 1) to i
window <- df[(i - window_size ):i, input_vars]
# Flatten the inputs into one row
input_flat <- as.list(as.vector(t(window)))
# target: row i + 1
target <- df[i + 1, input_vars]
target_named <- setNames(as.list(target), paste0("target_", input_vars))
# name inputs like RH2M_t-3, RH2M_t-2, RH2M_t-1, etc.
lag_labels <- paste0("_t-", window_size:1)
names(input_flat) <- paste0(rep(input_vars, each = window_size), lag_labels)
# Include LON, LAT, and time of prediction
meta <- df[i + 1, c("LON", "LAT", "times")]
c(meta, input_flat, target_named)
})
}
sliding_data <- map2_dfr(
groups,
seq_along(groups),
~sliding_window_group(.x, .y, length(groups), window_size = 3)
)
sliding_window_group <- function(df, group_id, total_groups, window_size = 3) {
message(sprintf("Processing group %d of %d...", group_id, total_groups))
df <- arrange(df, times)
n <- nrow(df)
if (n <= window_size) return(NULL)
map_dfr((window_size):(n - 1), function(i) {
# inputs: rows (i - window_size + 1) to i
window <- df[(i - window_size ):i, input_vars]
# Flatten the inputs into one row
input_flat <- as.list(as.vector(t(window)))
# target: row i + 1
target <- df[i + 1, input_vars]
target_named <- setNames(as.list(target), paste0("target_", input_vars))
# name inputs like RH2M_t-3, RH2M_t-2, RH2M_t-1, etc.
lag_labels <- paste0("_t-", window_size:1)
names(input_flat) <- paste0(rep(input_vars, each = window_size), lag_labels)
# Include LON, LAT, and time of prediction
meta <- df[i + 1, c("LON", "LAT", "times")]
c(meta, input_flat, target_named)
})
}
sliding_data <- map2_dfr(
groups,
seq_along(groups),
~sliding_window_group(.x, .y, length(groups), window_size = 3)
)
sliding_window_group <- function(df, group_id, total_groups, window_size = 3) {
message(sprintf("Processing group %d of %d...", group_id, total_groups))
df <- arrange(df, times)
n <- nrow(df)
if (n <= window_size) return(NULL)
map_dfr((window_size):(n - 1), function(i) {
# inputs: rows (i - window_size + 1) to i
window <- df[(i - window_size+1 ):i, input_vars]
# Flatten the inputs into one row
input_flat <- as.list(as.vector(t(window)))
# target: row i + 1
target <- df[i + 1, input_vars]
target_named <- setNames(as.list(target), paste0("target_", input_vars))
# name inputs like RH2M_t-3, RH2M_t-2, RH2M_t-1, etc.
lag_labels <- paste0("_t-", window_size:1)
names(input_flat) <- paste0(rep(input_vars, each = window_size), lag_labels)
# Include LON, LAT, and time of prediction
meta <- df[i + 1, c("LON", "LAT", "times")]
c(meta, input_flat, target_named)
})
}
sliding_data <- map2_dfr(
groups,
seq_along(groups),
~sliding_window_group(.x, .y, length(groups), window_size = 3)
)
normalize <- function(x) (x - min(x, na.rm = TRUE)) /
(max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
groups <- data %>%
mutate(times=make_datetime(YEAR, MO, DY, HR)) %>%
group_by(LON, LAT) %>%
select(LON, LAT, times, RH2M, T2M, PRECTOTCORR) %>%
#mutate(across(c(RH2M, T2M, PRECTOTCORR), normalize)) %>%
group_split()
# Parameters
# Parameters
overlap <- 3  # Number of steps to overlap
max_length <- 3  # Length of each window
start_index <- seq(1, nrow(data) - max_length, by = overlap - 1)  # Define start indices for windows
# Initialize an empty list to store the results from each group
all_groups_data <- list()
# Total number of iterations across all groups
total_iterations <- sum(sapply(groups, function(g) length(start_index)))
# Initialize a counter for progress
counter <- 0
# Loop through each group in the 'groups' list
for (g in groups) {
# Initialize an empty matrix for this group's data
data_matrix <- matrix(data = 0, nrow = length(start_index), ncol = max_length * 3 + 3 + 2)  # 3 input variables + 3 targets + 2 spatial variables (LON, LAT)
# For each start index, create the sliding window
for (i in 1:length(start_index)) {
# Temporal part: Extract past 3 time steps (RH2M, T2M, PRECTOTCORR)
temporal_part <- g[start_index[i]:(start_index[i] + max_length - 1), c("RH2M", "T2M", "PRECTOTCORR")]
# Flatten the temporal part into a vector (3 variables, max_length = 3)
flattened_part <- as.vector(t(temporal_part))  # Flatten to 1D
# Target: Next time step (for each variable)
target_part <- g[start_index[i] + max_length, c("RH2M", "T2M", "PRECTOTCORR")]
# Flatten the target part
flattened_target <- as.vector(target_part)
# Spatial information (LON and LAT for this window)
spatial_info <- g[start_index[i] + max_length, c("LON", "LAT")]
# Combine the input data (past 3 steps), target (next step), and spatial info into one vector
data_matrix[i, ] <- c(flattened_part, flattened_target, spatial_info)
# Update the counter and print progress
counter <- counter + 1
cat("Progress: ", round(counter / total_iterations * 100, 2), "%\r")
}
# Store the results of this group in the list
all_groups_data[[length(all_groups_data) + 1]] <- data_matrix
}
# Parameters
overlap <- 3  # Number of steps to overlap
max_length <- 3  # Length of each window
start_index <- seq(1, nrow(data) - max_length, by = overlap - 1)  # Define start indices for windows
# Initialize an empty list to store the results from each group
all_groups_data <- list()
# Total number of iterations across all groups
total_iterations <- sum(sapply(groups, function(g) length(start_index)))
# Initialize a counter for progress
counter <- 0
# Loop through each group in the 'groups' list
for (g in groups) {
# Initialize an empty matrix for this group's data
data_matrix <- matrix(data = 0, nrow = length(start_index), ncol = max_length * 3 + 3 + 2)  # 3 input variables + 3 targets + 2 spatial variables (LON, LAT)
# For each start index, create the sliding window
for (i in 1:length(start_index)) {
# Temporal part: Extract past 3 time steps (RH2M, T2M, PRECTOTCORR)
temporal_part <- g[start_index[i]:(start_index[i] + max_length - 1), c("RH2M", "T2M", "PRECTOTCORR")]
# Flatten the temporal part into a vector (3 variables, max_length = 3)
flattened_part <- as.vector(t(temporal_part))  # Flatten to 1D
# Target: Next time step (for each variable)
target_part <- g[start_index[i] + max_length, c("RH2M", "T2M", "PRECTOTCORR")]
# Flatten the target part
flattened_target <- as.vector(target_part)
# Spatial information (LON and LAT for this window)
spatial_info <- g[start_index[i] + max_length, c("LON", "LAT")]
# Combine the input data (past 3 steps), target (next step), and spatial info into one vector
data_matrix[i, ] <- c(flattened_part, flattened_target, spatial_info)
# Update the counter and print progress
counter <- counter + 1
cat("Progress: ", round(counter / total_iterations * 100, 2), "%\r")
}
# Store the results of this group in the list
all_groups_data[[length(all_groups_data) + 1]] <- data_matrix
}
# Parameters
overlap <- 3  # Number of steps to overlap between windows
max_length <- 3  # Length of each input window
target_length <- 1  # Number of steps to predict
# Initialize an empty list to store the results from each group
all_groups_data <- list()
# Total number of iterations across all groups (for progress tracking)
total_iterations <- 0  # Will calculate properly below
# First pass to calculate total iterations
for (g in groups) {
valid_rows <- nrow(g) - max_length - target_length + 1
if (valid_rows > 0) {
start_index <- seq(1, valid_rows, by = max_length - overlap + 1)
total_iterations <- total_iterations + length(start_index)
}
}
# Initialize a counter for progress
counter <- 0
# Loop through each group in the 'groups' list
for (g_idx in seq_along(groups)) {
g <- groups[[g_idx]]
# Calculate valid start indices FOR THIS GROUP
valid_rows <- nrow(g) - max_length - target_length + 1
if (valid_rows < 1) next  # Skip groups with insufficient data
start_index <- seq(1, valid_rows, by = max_length - overlap + 1)
# Create matrix with correct dimensions
n_windows <- length(start_index)
data_matrix <- matrix(
nrow = n_windows,
ncol = (max_length * 3) + (target_length * 3) + 2  # 3 vars * time steps + targets + coords
)
# For each start index, create the sliding window
for (i in seq_along(start_index)) {
start <- start_index[i]
end_input <- start + max_length - 1
end_target <- end_input + target_length
# Extract and flatten input window
temporal_part <- g[start:end_input, c("RH2M", "T2M", "PRECTOTCORR")]
flattened_part <- as.vector(t(temporal_part))  # Flatten row-wise
# Extract and flatten target
target_part <- g[(end_input + 1):end_target, c("RH2M", "T2M", "PRECTOTCORR")]
flattened_target <- as.vector(t(target_part))
# Get spatial coordinates (ensure numeric conversion)
spatial_info <- as.numeric(g[start, c("LON", "LAT")])
# Combine all components
data_matrix[i, ] <- c(
flattened_part,
flattened_target,
spatial_info
)
# Update progress
counter <- counter + 1
cat(sprintf("Processing group %d/%d: %.2f%%\r",
g_idx, length(groups),
counter/total_iterations*100)
)
}
# Store group results
all_groups_data[[g_idx]] <- data_matrix
}
# Combine all groups and clean NA values
final_data_matrix <- do.call(rbind, all_groups_data)
final_data_matrix <- na.omit(final_data_matrix)
# Add column names for clarity
colnames(final_data_matrix) <- c(
paste0("input_RH2M_t", rep(1:max_length, each = 3)),
paste0("input_T2M_t", rep(1:max_length, each = 3)),
paste0("input_PRECTOTCORR_t", rep(1:max_length, each = 3)),
paste0("target_RH2M_t", 1:target_length),
paste0("target_T2M_t", 1:target_length),
paste0("target_PRECTOTCORR_t", 1:target_length),
"LON", "LAT"
)
# View result
head(final_data_matrix)
# Add column names for clarity
colnames(final_data_matrix) <- c(
paste0("input_RH2M_t", rep(1:max_length, each = 3)),
paste0("input_T2M_t", rep(1:max_length, each = 3)),
paste0("input_PRECTOTCORR_t", rep(1:max_length, each = 3)),
paste0("target_RH2M_t", 1:target_length),
paste0("target_T2M_t", 1:target_length),
paste0("target_PRECTOTCORR_t", 1:target_length),
"LON", "LAT"
)
# Combine all groups and clean NA values
final_data_matrix <- do.call(rbind, all_groups_data)
final_data_matrix
head(final_data_matrix)
final_data_matrix <- as.data.frame(final_data_matrix)
final_data_matrix %>% summary()
final_data_matrix
final_data_matrix %>% summary()
final_data_matrix %>% arrange(-V3)
final_data_matrix %>% summary()
final_data_matrix %>% summarise(som= sum(V3) )
final_data_matrix
final_data_matrix %>% summarise(som= sum(V12) )
input_cols <- paste0(
"input_",
rep(c("RH2M", "T2M", "PRECTOTCORR"), each = max_length),
"_t", rep(1:max_length, times = 3)
)
target_cols <- paste0(
"target_",
rep(c("RH2M", "T2M", "PRECTOTCORR"), each = target_length),
"_t", rep(1:target_length, times = 3)
)
colnames(final_data_matrix) <- c(input_cols, target_cols, "LON", "LAT")
# View result
head(final_data_matrix)
# Combine all groups and clean NA values
final_data_matrix <- do.call(rbind, all_groups_data)
input_cols <- paste0(
"input_",
rep(c("RH2M", "T2M", "PRECTOTCORR"), each = max_length),
"_t", rep(1:max_length, times = 3)
)
target_cols <- paste0(
"target_",
rep(c("RH2M", "T2M", "PRECTOTCORR"), each = target_length),
"_t", rep(1:target_length, times = 3)
)
colnames(final_data_matrix) <- c(input_cols, target_cols, "LON", "LAT")
# View result
head(final_data_matrix)
final_data_matrix <- as_tibble(final_data_matrix)
# View result
head(final_data_matrix)
# Combine all groups and clean NA values
final_data_matrix <- do.call(rbind, all_groups_data)
#final_data_matrix <- na.omit(final_data_matrix)
final_data_matrix <- as_tibble(final_data_matrix)
# Combine all groups and clean NA values
final_data_matrix <- do.call(rbind, all_groups_data)
#final_data_matrix <- na.omit(final_data_matrix)
final_data_matrix <- as_tibble(final_data_matrix)
# View result
head(final_data_matrix)
colnames(final_data_matrix) <- c(
paste0(rep(c("RH2M", "T2M", "PRECTOTCORR"), each = max_length), "_t-", max_length:1),
paste0(rep(c("RH2M", "T2M", "PRECTOTCORR"), each = target_length), "_t+", 1:target_length),
"LON", "LAT"
)
# View result
head(final_data_matrix)
# Combine all groups and clean NA values
final_data_matrix <- do.call(rbind, all_groups_data)
#final_data_matrix <- na.omit(final_data_matrix)
final_data_matrix <- as_tibble(final_data_matrix)
# View result
final_data_matrix
final_data_matrix <- na.omit(final_data_matrix)
# View result
final_data_matrix
data
# For input_length = 3 and target_length = 1 (adjust if different)
input_vars <- c("RH2M", "T2M", "PRECTOTCORR")
target_vars <- c("RH2M", "T2M", "PRECTOTCORR")
# Generate column names
input_cols <- paste0("input_",
rep(input_vars, each = max_length),
"_t", rep(1:max_length, times = 3))
target_cols <- paste0("target_",
rep(target_vars, each = target_length),
"_t", rep(1:target_length, times = 3))
spatial_cols <- c("LON", "LAT")
# Assign all column names
colnames(final_data_matrix) <- c(input_cols, target_cols, spatial_cols)
final_data_matrix
final_data_matrix <- do.call(rbind, all_groups_data)
final_data_matrix <- as_tibble(final_data_matrix)
```{r}
final_data_matrix
colnames(final_data_matrix) <- c("RH2M-t3", "T2M-t3", "PRECTOTCORR-t3",
"RH2M-t2", "T2M-t2","PRECTOTCORR-t2",
"RH2M-t1", "T2M-t1","PRECTOTCORR-t1",
"RH2M-t", "T2M-t","PRECTOTCORR-t",
"LON", "LAT")
final_data_matrix
final_data_matrix
# Save the final data matrix to a CSV file
write_csv(final_data_matrix, "Prepared_data.csv")
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("hourly_data.csv")
library(tidyverse)
library(lubridate)
data <- read_csv("hourly_data.csv")
data
normalize <- function(x) (x - min(x, na.rm = TRUE)) /
(max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
groups <- data %>%
mutate(times=make_datetime(YEAR, MO, DY, HR)) %>%
group_by(LON, LAT) %>%
select(LON, LAT, times, RH2M, T2M, PRECTOTCORR) %>%
#mutate(across(c(RH2M, T2M, PRECTOTCORR), normalize)) %>%
group_split()
# Create matrix with correct dimensions
n_windows <- length(start_index)
# Parameters
overlap <- 3  # Number of steps to overlap between windows
max_length <- 3  # Length of each input window
target_length <- 1  # Number of steps to predict
# Initialize an empty list to store the results from each group
all_groups_data <- list()
# Total number of iterations across all groups (for progress tracking)
total_iterations <- 0  # Will calculate properly below
# First pass to calculate total iterations
for (g in groups) {
valid_rows <- nrow(g) - max_length - target_length + 1
if (valid_rows > 0) {
start_index <- seq(1, valid_rows, by = max_length - overlap + 1)
total_iterations <- total_iterations + length(start_index)
}
}
# Initialize a counter for progress
counter <- 0
# Loop through each group in the 'groups' list
for (g_idx in seq_along(groups)) {
g <- groups[[g_idx]]
# Calculate valid start indices FOR THIS GROUP
valid_rows <- nrow(g) - max_length - target_length + 1
if (valid_rows < 1) next  # Skip groups with insufficient data
start_index <- seq(1, valid_rows, by = max_length - overlap + 1)
# Create matrix with correct dimensions
n_windows <- length(start_index)
data_matrix <- matrix(
nrow = n_windows,
ncol = (max_length * 3) + (target_length * 3) + 2 + 1  # 3 vars * time steps + targets + coords
)
# For each start index, create the sliding window
for (i in seq_along(start_index)) {
start <- start_index[i]
end_input <- start + max_length - 1
end_target <- end_input + target_length
# Extract and flatten input window
temporal_part <- g[start:end_input, c("RH2M", "T2M", "PRECTOTCORR")]
flattened_part <- as.vector(t(temporal_part))  # Flatten row-wise
# Extract and flatten target
target_part <- g[(end_input + 1):end_target, c("RH2M", "T2M", "PRECTOTCORR")]
flattened_target <- as.vector(t(target_part))
# Get spatial coordinates (ensure numeric conversion)
spatial_info <- as.numeric(g[start, c("LON", "LAT")])
# Get timestamp corresponding to the target time step (first of target range)
timestamp <- as.numeric(g[end_input + 1, "times"])  # as.numeric = store as timestamp (optional)
# Combine all components
data_matrix[i, ] <- c(
flattened_part,
flattened_target,
spatial_info,
timestamp
)
# Update progress
counter <- counter + 1
cat(sprintf("Processing group %d/%d: %.2f%%\r",
g_idx, length(groups),
counter/total_iterations*100)
)
}
# Store group results
all_groups_data[[g_idx]] <- data_matrix
}
# Combine all groups and clean NA values
final_data_matrix <- do.call(rbind, all_groups_data)
final_data_matrix <- as_tibble(final_data_matrix)
colnames(final_data_matrix) <- c("RH2M-t3", "T2M-t3", "PRECTOTCORR-t3",
"RH2M-t2", "T2M-t2","PRECTOTCORR-t2",
"RH2M-t1", "T2M-t1","PRECTOTCORR-t1",
"RH2M-t", "T2M-t","PRECTOTCORR-t",
"LON", "LAT")
# Parameters
overlap <- 3  # Number of steps to overlap between windows
max_length <- 3  # Length of each input window
target_length <- 1  # Number of steps to predict
# Initialize an empty list to store the results from each group
all_groups_data <- list()
# Total number of iterations across all groups (for progress tracking)
total_iterations <- 0  # Will calculate properly below
# First pass to calculate total iterations
for (g in groups) {
valid_rows <- nrow(g) - max_length - target_length + 1
if (valid_rows > 0) {
start_index <- seq(1, valid_rows, by = max_length - overlap + 1)
total_iterations <- total_iterations + length(start_index)
}
}
# Initialize a counter for progress
counter <- 0
# Loop through each group in the 'groups' list
for (g_idx in seq_along(groups)) {
g <- groups[[g_idx]]
# Calculate valid start indices FOR THIS GROUP
valid_rows <- nrow(g) - max_length - target_length + 1
if (valid_rows < 1) next  # Skip groups with insufficient data
start_index <- seq(1, valid_rows, by = max_length - overlap + 1)
# Create matrix with correct dimensions
n_windows <- length(start_index)
data_matrix <- matrix(
nrow = n_windows,
ncol = (max_length * 3) + (target_length * 3) + 2 + 1  # 3 vars * time steps + targets + coords
)
# For each start index, create the sliding window
for (i in seq_along(start_index)) {
start <- start_index[i]
end_input <- start + max_length - 1
end_target <- end_input + target_length
# Extract and flatten input window
temporal_part <- g[start:end_input, c("RH2M", "T2M", "PRECTOTCORR")]
flattened_part <- as.vector(t(temporal_part))  # Flatten row-wise
# Extract and flatten target
target_part <- g[(end_input + 1):end_target, c("RH2M", "T2M", "PRECTOTCORR")]
flattened_target <- as.vector(t(target_part))
# Get spatial coordinates (ensure numeric conversion)
spatial_info <- as.numeric(g[start, c("LON", "LAT")])
# Get timestamp corresponding to the target time step (first of target range)
timestamp <- as.numeric(g[end_input + 1, "times"])  # as.numeric = store as timestamp (optional)
# Combine all components
data_matrix[i, ] <- c(
flattened_part,
flattened_target,
spatial_info,
timestamp
)
# Update progress
counter <- counter + 1
cat(sprintf("Processing group %d/%d: %.2f%%\r",
g_idx, length(groups),
counter/total_iterations*100)
)
}
# Store group results
all_groups_data[[g_idx]] <- data_matrix
}
# Combine all groups and clean NA values
final_data_matrix <- do.call(rbind, all_groups_data)
final_data_matrix <- as_tibble(final_data_matrix)
colnames(final_data_matrix) <- c("RH2M-t3", "T2M-t3", "PRECTOTCORR-t3",
"RH2M-t2", "T2M-t2","PRECTOTCORR-t2",
"RH2M-t1", "T2M-t1","PRECTOTCORR-t1",
"RH2M-t", "T2M-t","PRECTOTCORR-t",
"LON", "LAT", "time")
final_data_matrix
data
groups[[1]]
as.numeric(2024-12-20 03:00:00)
as.numeric("2024-12-20 03:00:00")
# Save the final data matrix to a CSV file
write_csv(final_data_matrix, "Prepared_data.csv")
